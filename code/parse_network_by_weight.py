#Author: Ricky Flores
#Original Work: https://github.com/kmcooper/Ingredient_CoOccurrence
#Created: 1/6/20
#Last editied: 1/6/20
#input: ingredients.network.sif file from ingredient network R code
#output: A node and edge list (.sif format) with edge wieghts of threshold or higher.
#notes: this is a python adaptation to https://github.com/kmcooper/Ingredient_CoOccurrence/blob/master/code/parse_network_by_weight.pl

import getopt
import sys
import os
import re

# Function Name: Usage
# Parameters: n/a
# Return: Warning message about parameters
def usage():
    print(("\nUsage: ingredient_has.py [-i ingredients.tab] [-o FILE]")
    + "\n \t-i: ingredients.tab = The file generated by the Rscript"
    + "\n \t-o: outputfile.output = name fo the file the network will be written to"
    + "\n \t-t: the edge weight threshold (edges below this weight will be deleted)")

infile = ""
outfile = ""
ew = 0

try:
    opts, args = getopt.getopt(sys.argv[1:], 'i:o:t:')
except getopt.GetoptError as err:
    sys.stdout = sys.stderr
    print(str(err))
    usage()
    sys.exit(2)

for (opt, args) in opts:
    if (opt == '-i'):
        print("Received the following file as input: " + args)
        infile = args
    if (opt == '-o'):
        print("Received the following file as network output: " + args)
        outfile = args
    if (opt == '-t'):
        print("Received the following for edge weight: " + args)
        ew = args

# number of removed edges
removed_count = 0

# open the sif file
data = open(infile, encoding= "utf-8")
line = data.readline()
out = open(outfile, "w", encoding='utf-8')

# iterate each edge and chck what the weight is
# if the weight is less than ew threshold, do not print it out
print ("Checking Edges.....\n")
while(line):
    
    #save the current line
    curr_line = line
    
    # check if the line is in sif format
    if (re.search(r'\S+\s+\S+\s+(\d+).*\n', curr_line)):
        match = re.search(r'\S+\s+\S+\s+(\d+).*\n', curr_line)
        curr_weight = int(match.group(1))
        if (curr_weight >= int(ew)):
            out.write(curr_line)
        else:
            removed_count += 1
    else:
        removed_count += 1
    # move to the next item
    line = data.readline()

data.close()
out.close()

print ("Removed a total of " + str(removed_count) + " lines from the input network.\n")